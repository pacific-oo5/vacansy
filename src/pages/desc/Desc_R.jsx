import React, { useState, useEffect } from 'react';
import { useParams, useNavigate } from 'react-router-dom';
import axios from 'axios';
import { Container, Card, Form, Button, Spinner, Alert } from 'react-bootstrap';

const API_URL = "https://quality-herring-fine.ngrok-free.app/api";

const VacancyDetail = () => {
  const { vacancyId } = useParams();
  const navigate = useNavigate();
  const [vacancy, setVacancy] = useState(null);
  const [loading, setLoading] = useState(true);
  const [currentUser, setCurrentUser] = useState(null);
  const [isEditing, setIsEditing] = useState(false);
  const [formData, setFormData] = useState({});
  const [message, setMessage] = useState(null);

  const token = localStorage.getItem("token");

  useEffect(() => {
    const fetchData = async () => {
      try {
        const vacancyRes = await axios.get(`${API_URL}/vacancies/${vacancyId}/`);
        setVacancy(vacancyRes.data);
        setFormData(vacancyRes.data);

        if (token) {
          const profileRes = await axios.get(`${API_URL}/my/`, {
            headers: { Authorization: `Bearer ${token}` }
          });
          setCurrentUser(profileRes.data);
        }
      } catch (err) {
        console.error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏:", err);
        setMessage("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö.");
      } finally {
        setLoading(false);
      }
    };

    fetchData();
  }, [vacancyId, token]);

  const isEmployer = currentUser?.user_r === true;
  const isOwner = currentUser && vacancy && currentUser.id === vacancy.user;

  const handleDelete = async () => {
    if (window.confirm("–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –≤–∞–∫–∞–Ω—Å–∏—é?")) {
      try {
        await axios.delete(`${API_URL}/vacancies/${vacancyId}/`, {
          headers: { Authorization: `Bearer ${token}` }
        });
        navigate("/MyVacancies");
      } catch (err) {
        console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏:", err);
        alert("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏.");
      }
    }
  };

  const handleChange = (e) => {
    const { name, value, type, checked } = e.target;
    setFormData((prev) => ({
      ...prev,
      [name]: type === 'checkbox' ? checked : value
    }));
  };

  const handleSave = async () => {
    try {
      const res = await axios.put(`${API_URL}/my/vacancies/${vacancyId}/`, formData, {
        headers: { Authorization: `Bearer ${token}` }
      });
      setVacancy(res.data);
      setFormData(res.data);
      setIsEditing(false);
      setMessage("‚úÖ –í–∞–∫–∞–Ω—Å–∏—è —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞.");
    } catch (err) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏:", err);
      setMessage("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏.");
    }
  };

  if (loading) {
    return (
      <Container className="text-center mt-5">
        <Spinner animation="border" />
      </Container>
    );
  }

  return (
    <Container className="mt-5">
      {vacancy ? (
        <Card>
          <Card.Body>
            {isEditing ? (
              <>
                <Form>
                  <Form.Group>
                    <Form.Label>–ù–∞–∑–≤–∞–Ω–∏–µ</Form.Label>
                    <Form.Control
                      name="name"
                      value={formData.name || ''}
                      onChange={handleChange}
                    />
                  </Form.Group>

                  <Form.Group className="mt-2">
                    <Form.Label>–û–ø–∏—Å–∞–Ω–∏–µ</Form.Label>
                    <Form.Control
                      as="textarea"
                      rows={3}
                      name="description"
                      value={formData.description || ''}
                      onChange={handleChange}
                    />
                  </Form.Group>

                  <Form.Group className="mt-2">
                    <Form.Label>–û —Å–µ–±–µ</Form.Label>
                    <Form.Control
                      name="about_me"
                      value={formData.about_me || ''}
                      onChange={handleChange}
                    />
                  </Form.Group>

                  <Form.Group className="mt-2">
                    <Form.Label>–¢–∏–ø —Ä–∞–±–æ—Ç—ã</Form.Label>
                    <Form.Control
                      name="work_type"
                      value={formData.work_type || ''}
                      onChange={handleChange}
                    />
                  </Form.Group>

                  <Form.Group className="mt-2">
                    <Form.Label>–ì—Ä–∞—Ñ–∏–∫</Form.Label>
                    <Form.Control
                      name="work_time"
                      value={formData.work_time || ''}
                      onChange={handleChange}
                    />
                  </Form.Group>

                  <Form.Group className="mt-2">
                    <Form.Label>–ó–∞—Ä–ø–ª–∞—Ç–∞</Form.Label>
                    <Form.Control
                      type="number"
                      name="salary"
                      value={formData.salary || ''}
                      onChange={handleChange}
                    />
                  </Form.Group>

                  <Form.Group className="mt-2">
                    <Form.Label>–°—Ç—Ä–∞–Ω–∞</Form.Label>
                    <Form.Control
                      name="country"
                      value={formData.country || ''}
                      onChange={handleChange}
                    />
                  </Form.Group>

                  <Form.Group className="mt-2">
                    <Form.Label>–ì–æ—Ä–æ–¥</Form.Label>
                    <Form.Control
                      name="city"
                      value={formData.city || ''}
                      onChange={handleChange}
                    />
                  </Form.Group>

                  <Form.Group className="mt-2">
                    <Form.Check
                      label="–£–¥–∞–ª—ë–Ω–Ω–∞—è —Ä–∞–±–æ—Ç–∞"
                      type="checkbox"
                      name="is_remote"
                      checked={formData.is_remote || false}
                      onChange={handleChange}
                    />
                  </Form.Group>

                  <Form.Group className="mt-2">
                    <Form.Label>–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è</Form.Label>
                    <Form.Control
                      as="textarea"
                      name="requirements"
                      value={formData.requirements || ''}
                      onChange={handleChange}
                    />
                  </Form.Group>

                  <Form.Group className="mt-2">
                    <Form.Label>–û–±—è–∑–∞–Ω–Ω–æ—Å—Ç–∏</Form.Label>
                    <Form.Control
                      as="textarea"
                      name="responsibilities"
                      value={formData.responsibilities || ''}
                      onChange={handleChange}
                    />
                  </Form.Group>

                  <Form.Group className="mt-2">
                    <Form.Label>Telegram</Form.Label>
                    <Form.Control
                      name="telegram"
                      value={formData.telegram || ''}
                      onChange={handleChange}
                    />
                  </Form.Group>

                  <Form.Group className="mt-2">
                    <Form.Label>–°—Å—ã–ª–∫–∞ –Ω–∞ Telegram</Form.Label>
                    <Form.Control
                      name="telegram_link"
                      value={formData.telegram_link || ''}
                      onChange={handleChange}
                    />
                  </Form.Group>

                  <div className="mt-3 d-flex gap-2">
                    <Button variant="success" onClick={handleSave}>
                      üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å
                    </Button>
                    <Button variant="secondary" onClick={() => setIsEditing(false)}>
                      ‚ùå –û—Ç–º–µ–Ω–∞
                    </Button>
                  </div>
                </Form>
              </>
            ) : (
              <>
                <Card.Title>{vacancy.name}</Card.Title>
                <Card.Text><strong>–û–ø–∏—Å–∞–Ω–∏–µ:</strong> {vacancy.description}</Card.Text>
                <Card.Text><strong>–û —Å–µ–±–µ:</strong> {vacancy.about_me}</Card.Text>
                <Card.Text><strong>–¢–∏–ø —Ä–∞–±–æ—Ç—ã:</strong> {vacancy.work_type}</Card.Text>
                <Card.Text><strong>–ì—Ä–∞—Ñ–∏–∫:</strong> {vacancy.work_time}</Card.Text>
                <Card.Text><strong>–ó–∞—Ä–ø–ª–∞—Ç–∞:</strong> {vacancy.salary} —Å–æ–º</Card.Text>
                <Card.Text><strong>–°—Ç—Ä–∞–Ω–∞:</strong> {vacancy.country}</Card.Text>
                <Card.Text><strong>–ì–æ—Ä–æ–¥:</strong> {vacancy.city}</Card.Text>
                <Card.Text><strong>–£–¥–∞–ª—ë–Ω–Ω–∞—è —Ä–∞–±–æ—Ç–∞:</strong> {vacancy.is_remote ? '–î–∞' : '–ù–µ—Ç'}</Card.Text>
                <Card.Text><strong>–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:</strong> {vacancy.requirements}</Card.Text>
                <Card.Text><strong>–û–±—è–∑–∞–Ω–Ω–æ—Å—Ç–∏:</strong> {vacancy.responsibilities}</Card.Text>
                <Card.Text><strong>Telegram:</strong> {vacancy.telegram}</Card.Text>
                <Card.Text>
                  <strong>–°—Å—ã–ª–∫–∞ –Ω–∞ Telegram:</strong>{' '}
                  <a href={vacancy.telegram_link} target="_blank" rel="noopener noreferrer">
                    {vacancy.telegram_link}
                  </a>
                </Card.Text>
                <Card.Text><strong>–û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ:</strong> {new Date(vacancy.published_at).toLocaleString()}</Card.Text>
                <Card.Text><strong>–ê–∫—Ç–∏–≤–Ω–∞:</strong> {vacancy.is_active ? '–î–∞' : '–ù–µ—Ç'}</Card.Text>

                {/* –¢–æ–ª—å–∫–æ –¥–ª—è —Ä–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª—è-–≤–ª–∞–¥–µ–ª—å—Ü–∞ */}
              
                  <div className="mt-3 d-flex gap-2">
                    <Button variant="primary" onClick={() => setIsEditing(true)}>
                      ‚úè –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
                    </Button>
                    <Button variant="danger" onClick={handleDelete}>
                      üóë –£–¥–∞–ª–∏—Ç—å
                    </Button>
                  </div>
          
              </>
            )}
          </Card.Body>
        </Card>
      ) : (
        <Alert variant="danger" className="mt-3">–í–∞–∫–∞–Ω—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.</Alert>
      )}

      {message && <Alert variant="info" className="mt-3">{message}</Alert>}
    </Container>
  );
};

export default VacancyDetail;
